-- Lab-SQL-joins
USE Sakila;

-- List the number of films per category.
SELECT c.name AS category, COUNT(fc.film_id) AS films
FROM category c
JOIN film_category fc ON fc.category_id = c.category_id
GROUP BY c.name;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_id, ci.city, c.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country c ON ci.country_id = c.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff stf ON s.store_id = stf.store_id
JOIN payment p ON stf.staff_id = p.staff_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category.
SELECT c.name AS category, ROUND(AVG(f.length)) AS average_length
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name;

-- Identify the film categories with the longest average running time.
SELECT c.name AS category, ROUND(AVG(f.length)) AS average_length
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY average_length DESC
LIMIT 1;

-- Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, r.rental_date, r.return_date
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE f.title = 'Academy Dinosaur' AND i.store_id = 1
ORDER BY r.return_date DESC;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.'
SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

SELECT DISTINCT f.title, 
CASE 
  WHEN IFNULL(r.return_date, 1) = 1 THEN 'NOT available'
  ELSE 'Available'
END AS availability
FROM film f
INNER JOIN inventory i ON f.film_id = i.film_id
INNER JOIN (
  SELECT inventory_id, MAX(rental_date) AS latest_rental
  FROM rental
  GROUP BY inventory_id
) AS lr ON i.inventory_id = lr.inventory_id
INNER JOIN rental r ON i.inventory_id = r.inventory_id AND lr.latest_rental = r.rental_date
GROUP BY f.film_id
ORDER BY f.title;

use sakila;
SELECT * FROM rental WHERE MONTH(rental.rental_date) = '08' AND YEAR(rental.rental_date) = '2005';